#include <graphics.h>
#include <stdio.h>

POINT points11[] = { {70.265335,18.705359},{60.769646,19.770308},{52.140079,21.787683},{45.250664,28.595324},{40.082943,33.460602},{34.923130,41.211292},{33.219891,49.886276},{28.931475,60.512997},{23.774300,69.225487},{18.614489,76.976181},{14.312887,82.793884},{10.027106,94.382408},{7.470930,106.913986},{7.499932,117.493820},{5.799330,127.130608},{6.699726,140.586487},{11.038239,148.234024},{14.523814,159.738159},{22.326811,171.195404},{30.990652,181.681473},{37.924892,191.224487},{43.995644,200.776886},{51.796005,211.272339},{60.454575,219.834793},{66.527962,230.348999},{70.863838,237.034744},{74.344147,246.615265},{78.690567,257.148224},{84.769234,269.586029},{90.847893,282.023834},{97.771584,287.719635},{102.981491,298.243225},{109.913094,306.824432},{119.429878,313.453918},{125.495354,321.082703},{133.290436,329.654541},{140.219406,337.273956},{148.009216,343.922180},{152.347733,351.569733},{157.552368,360.169678},{163.623123,369.722076},{169.685959,376.389069},{174.021835,383.074799},{183.543900,391.627899},{192.210373,403.075775},{198.273224,409.742737},{207.792633,417.334045},{215.587723,425.905884},{210.425278,432.694763},{206.984528,437.541290},{200.089828,442.425323},{194.063904,449.223572},{187.177124,456.993011},{180.290344,464.762451},{170.813110,472.560028},{166.524689,483.186768},{159.637909,490.956207},{156.197159,495.802734},{151.911377,507.391266},{149.355194,519.922852},{148.518082,529.550232},{150.271423,539.149536},{152.035294,552.596008},{154.665298,566.994934},{159.009079,576.566101},{163.360779,589.022644},{169.439438,601.460449},{178.098007,610.022888},{187.614792,616.652405},{197.989792,621.348877},{210.955231,626.017273},{218.731857,627.856445},{229.965057,630.619995},{236.872940,630.544983},{247.234741,630.432434},{258.457397,629.348755},{269.677429,627.303223},{280.033966,625.267090},{287.792114,620.373657},{295.547668,614.518494},{305.030182,608.644531},{314.512665,602.770508},{323.123779,594.020508},{330.868774,584.318115},{337.752930,575.586853},{342.920624,570.721558},{348.085724,564.894531},{352.382050,557.153198},{357.544495,550.364319},{364.431274,542.594849},{372.194733,539.625061},{382.559174,540.474365},{389.467041,540.399353},{399.828857,540.286804},{411.054138,540.164917},{422.276794,539.081177},{431.775116,538.978027},{439.546478,538.893677},{444.730011,539.799194},{451.640533,540.685974},{458.556305,543.496399},{466.327667,543.411987},{474.099030,543.327576},{481.873016,544.205017},{491.368713,543.140076},{501.722595,540.142151},{505.200256,548.760864},{509.536133,555.446594},{519.047668,560.152466},{527.682495,560.058716},{535.440674,555.165283},{542.324829,546.434021},{540.568848,535.872986},{538.815491,526.273682},{546.568420,519.456665},{554.323914,513.601440},{563.798523,504.842072},{569.835022,501.891022},{576.729736,497.006989},{581.894775,491.179901},{587.920715,484.381653},{596.552917,483.326080},{606.912109,482.251740},{616.402527,479.263184},{620.698853,471.521881},{616.349792,460.027130},{609.423462,453.369507},{613.711853,442.742798},{617.142090,434.049042},{618.826843,418.641449},{618.797852,408.061615},{620.487915,394.577606},{620.448364,380.150543},{619.542725,364.771088},{616.923218,354.219360},{612.574158,342.724609},{604.776489,333.190979},{594.393555,325.609070},{588.333374,319.903870},{580.543518,313.255646},{573.614563,305.636230},{564.966553,300.920990},{558.050781,298.110596},{547.675781,293.414093},{537.306030,290.641205},{526.070190,286.915894},{516.571899,287.019043},{508.792633,284.218018},{501.013367,281.417023},{496.677490,274.731262},{506.178436,275.589935},{514.810669,274.534363},{526.041199,276.336060},{535.536926,275.271118},{543.308289,275.186707},{551.074341,273.178711},{556.239441,267.351624},{559.677551,261.543304},{563.099854,249.964157},{563.929077,237.451340},{565.637573,230.699966},{565.611206,221.081924},{563.857849,211.482651},{559.527283,206.720520},{551.740112,201.034088},{543.084167,193.433426},{535.307495,191.594208},{526.670044,190.726181},{518.890747,187.925156},{511.982910,188.000183},{503.345428,187.132141},{492.975708,184.359253},{483.469482,181.576996},{476.553680,178.766602},{465.328400,178.888489},{457.551758,177.049286},{451.507385,177.114914},{446.326477,177.171173},{438.552490,176.293762},{435.943573,169.589279},{434.198151,162.875412},{429.867554,158.113266},{422.080383,152.426849},{415.167236,150.578247},{416.867828,140.941467},{423.759888,135.095627},{431.518066,130.202225},{443.612091,131.994553},{454.834747,130.910843},{465.204468,133.683731},{472.991669,139.370163},{482.505798,145.037842},{492.886078,151.657944},{502.394928,155.402008},{511.903809,159.146072},{521.402161,159.042923},{532.627441,158.921021},{543.842163,154.951920},{552.461182,149.087326},{561.941040,142.251556},{567.095581,132.577255},{572.250122,122.902962},{574.814209,113.256798},{576.512207,102.658203},{575.619690,92.087746},{576.454163,81.498528},{572.113037,72.889183},{567.763977,61.394428},{562.548767,48.947243},{556.485962,42.280258},{550.425720,36.575077},{545.223755,28.936911},{537.431274,21.326876},{529.636230,12.755036},{519.266479,9.982149},{508.038574,9.142246},{500.267212,9.226638},{489.897491,6.453751},{478.664276,3.690240},{470.887665,1.851026},{459.657104,0.049319},{447.568298,0.180596},{436.343018,0.302495},{427.713440,2.319871},{419.947357,4.327870},{408.714172,1.564360},{396.625397,1.695637},{385.400085,1.817537},{373.311310,1.948814},{362.088654,3.032517},{349.133759,2.211367},{334.457184,3.332578},{318.917114,4.463166},{312.877991,6.452411},{299.936279,10.440279},{286.991913,13.466343},{278.364990,16.445522},{267.147614,19.452831},{257.657196,22.441389},{243.846725,24.515026},{231.768494,28.493517},{222.278076,31.482073},{210.189301,31.613350},{198.108429,34.630035},{184.303238,38.627281},{173.083221,40.672787},{165.319763,43.642590},{154.963226,45.678719},{144.601425,45.791245},{134.242249,46.865570},{120.429146,47.977402},{117.812325,38.387501},{112.618240,33.634743},{107.424149,28.881989},{98.776131,24.166740},{90.991585,19.442116},{84.081078,18.555328},{77.170570,17.668539} };
POINT points12[] = { {215.484879,398.166718},{215.346344,391.456085},{216.035110,382.817444},{215.896561,376.106812},{217.472046,368.416077},{220.801147,361.662567},{222.396423,354.930511},{225.705734,347.218323},{229.921539,341.412750},{234.137329,335.607147},{239.220047,329.790833},{246.016785,322.994415},{253.680450,316.187256},{262.250610,311.286713},{269.106720,307.366272},{276.809967,302.476410},{285.439484,300.451843},{294.029419,296.509949},{303.506073,293.515991},{311.229126,289.584808},{318.105042,286.623016},{326.714752,283.639771},{335.364075,282.573853},{343.106903,279.601349},{349.982819,276.639557},{357.765228,275.584351},{364.660950,273.581238},{371.497284,268.702118},{380.973907,265.708160},{388.716736,262.735657},{395.533295,256.897888},{403.276093,253.925369},{410.112427,249.046249},{416.121429,246.095200},{422.918182,239.298767},{428.020691,234.441116},{433.103394,228.624802},{438.166321,221.849838},{443.268829,216.992172},{447.484619,211.186600},{445.592468,203.538773},{440.252441,196.892517},{436.626465,189.266144},{431.286438,182.619888},{426.793549,175.004242},{419.719727,168.379440},{413.532593,162.702576},{405.591827,156.088486},{396.055817,156.206482},{387.366882,155.355087},{376.097046,155.494522},{366.580811,156.571167},{354.424255,155.762680},{345.715576,153.952621},{336.139954,152.153290},{328.278381,149.373856},{321.263916,145.625031},{314.229645,140.917542},{305.481384,137.190170},{296.713287,132.504135},{288.851715,129.724686},{280.123230,126.955978},{270.527832,124.197990},{260.952209,122.398659},{251.376602,120.599327},{243.435852,113.985252},{234.727158,112.175194},{222.570602,111.366707},{213.901489,111.473969},{206.946396,110.601120},{199.124405,109.738991},{188.721466,109.867706},{177.431824,109.048492},{168.762711,109.155754},{161.827423,109.241562},{154.971298,113.162010},{143.780624,117.136093},{137.771622,120.087151},{130.009003,122.101006},{123.192467,127.938774},{116.415512,135.693848},{107.884949,142.511734},{103.708733,150.234634},{99.552307,158.916199},{95.415672,168.556427},{91.298836,179.155304},{89.762939,188.763351},{88.306206,202.206039},{86.750519,210.855423},{87.874733,223.307266},{88.092453,233.852509},{90.910904,244.365585},{94.596268,254.867935},{99.148537,265.359558},{104.488556,272.005798},{111.621773,281.506592},{116.981583,289.111511},{122.341385,296.716431},{132.035751,304.267700},{140.843414,310.871063},{148.036011,323.247833},{156.036133,332.737885},{159.602753,337.488281},{165.809677,344.123810},{172.036392,351.717987},{176.529297,359.333618},{181.908890,367.897217},{191.623047,376.407166},{198.756271,385.907928},{202.342667,391.616974},{209.396713,397.283142} };
POINT points13[] = { {493.133087,293.062805},{484.463989,293.170044},{478.435181,295.162445},{469.805664,297.187042},{462.062836,300.159546},{454.339783,304.090729},{446.636566,308.980560},{439.820007,314.818329},{431.329041,323.553528},{424.552094,331.308594},{420.375854,339.031494},{416.219452,347.713074},{412.023438,354.477325},{409.600830,363.137421},{407.099060,367.962891},{404.755615,380.457642},{403.219727,390.065704},{401.644257,397.756439},{401.014832,409.271057},{401.192963,417.898987},{400.563568,429.413635},{399.914368,439.969604},{400.052917,446.680237},{400.211273,454.349487},{401.276093,463.925354},{405.020844,477.303680},{408.666626,485.888702},{412.292603,493.515076},{415.958191,503.058777},{421.298187,509.705017},{429.258728,517.277771},{438.046600,522.922485},{444.213959,527.640686},{451.208618,530.430847},{459.070190,533.210266},{466.892181,534.072388},{478.181824,534.891602},{485.944458,532.877747},{494.613556,532.770508},{501.489471,529.808716},{510.119019,527.784119},{519.575867,523.831482},{529.032715,519.878906},{535.928406,517.875732},{543.592102,511.068604},{551.295349,506.178772},{558.939209,498.412964},{567.469727,491.595093},{573.419373,485.768036},{581.102844,479.919556},{585.298828,473.155304},{592.883301,462.513519},{597.946228,455.738556},{602.082886,446.098328},{607.145813,439.323364},{609.548584,429.704590},{611.104309,421.055206},{615.300293,414.290955},{616.757019,400.848267},{616.499756,388.385712},{615.415100,377.851166},{613.483337,368.286041},{608.064148,357.805145},{604.398621,348.261444},{598.112488,337.791290},{589.285034,330.229279},{583.038513,321.676422},{574.211060,314.114410},{564.556274,308.480438},{558.388977,303.762238},{547.946411,301.973633},{538.291626,296.339661},{529.543396,292.612305},{517.406616,292.762451},{509.604401,292.859009},{501.782410,291.996857} };
POINT points14[] = { {495.129120,460.871063},{502.931335,460.774536},{511.521271,456.832611},{520.091431,451.932068},{522.573425,446.147919},{525.882690,438.435760},{528.305298,429.775635},{531.614624,422.063477},{537.564270,416.236420},{544.360962,409.440002},{548.596558,404.593079},{540.734985,401.813629},{535.553345,402.836639},{529.484924,402.911743},{522.549683,402.997528},{516.501099,404.031281},{509.625153,406.993073},{502.788818,411.872192},{496.779816,414.823242},{493.430939,420.618103},{490.062256,425.454315},{485.905823,434.135864},{483.404053,438.961334},{481.848358,447.610718},{482.814240,452.393311},{486.400635,458.102356},{489.040955,459.987488} };
POINT points15[] = { {492.191925,444.606049},{497.413177,445.500336},{502.594849,444.477325},{508.603851,441.526245},{503.283630,435.838654},{503.184662,431.045349},{506.553345,426.209167},{513.468872,425.164703},{516.168579,429.925812},{520.404175,425.078888},{521.132507,418.357544},{514.157654,416.526031},{508.128845,418.518433},{501.252930,421.480225},{497.824860,423.440460},{494.456177,428.276642},{491.067719,432.154175},{489.472443,438.886261} };
POINT points16[] = { {556.240417,396.827271},{564.003052,394.813416},{569.184753,393.790405},{575.193726,390.839325},{581.143372,385.012299},{590.560669,379.142334},{597.298035,369.469940},{597.060486,357.966034},{595.168335,350.318207},{591.542358,342.691833},{585.394775,338.932281},{577.572815,338.070160},{570.657288,339.114624},{562.934265,343.045807},{556.038574,345.048950},{553.517029,348.915741},{550.247253,358.545258},{550.385803,365.255859},{550.544189,372.925140},{549.815796,379.646484},{550.781677,384.429047},{550.940002,392.098328},{552.752991,395.911499} };
POINT points17[] = { {561.155273,390.657867},{564.722046,389.193146},{568.545654,387.725250},{571.855530,386.263672},{574.879272,383.385071},{577.383362,380.228790},{579.099304,376.229858},{578.999634,371.401062},{577.142944,368.582855},{574.509827,365.490112},{570.394104,365.256897},{566.809753,365.869507},{563.499878,367.331055},{562.536926,370.468292},{560.768250,371.910767},{559.273987,374.202209},{557.528687,376.780884},{555.789307,379.643585},{554.581238,383.352112},{554.651611,386.760681},{556.490723,388.726746},{558.341553,391.260925} };
POINT points18[] = { {567.203308,383.373505},{569.754333,382.489594},{572.042603,381.324799},{573.531006,378.749298},{574.248840,376.183350},{572.648987,373.361938},{569.805908,372.544769},{566.980408,372.579712},{564.697998,374.028564},{563.484070,377.453033},{564.068176,380.855225},{565.901367,382.537262} };
POINT points19[] = { {509.854736,380.780182},{512.069763,376.064819},{513.102478,370.085510},{515.326294,365.796204},{517.558899,361.932953},{520.185547,358.491028},{522.821045,355.475159},{525.080017,352.890137},{529.283081,351.133423},{535.438965,350.631073},{540.859497,351.842529},{546.236023,350.923645},{543.092102,347.979309},{539.598022,346.743988},{535.315796,344.666077},{531.059998,343.866364},{526.777771,341.788452},{520.569092,339.734375},{517.513123,341.050720},{511.733704,341.122253},{508.695343,343.290741},{504.903992,346.320892},{501.856812,348.063324},{500.788910,352.338318},{500.159058,359.165009},{498.697052,363.018707},{496.814575,365.172882},{495.387756,370.730865},{495.099213,375.422424},{494.425385,380.118744},{496.080933,385.638580},{499.251251,389.861145},{500.827606,391.546387},{504.348053,394.059906},{507.447998,394.873901},{508.883606,389.741974},{508.795624,385.481262} };
POINT points110[] = { {478.271179,361.460175},{480.728394,356.031494},{482.450195,352.316620},{484.452301,349.734772},{487.225037,347.143402},{490.488007,343.409454},{495.052887,340.511780},{497.580475,338.491669},{501.374756,335.603516},{504.445374,334.997284},{510.078766,334.075226},{513.412109,333.749878},{519.045471,332.827820},{521.876831,333.076904},{527.270996,333.010162},{531.894470,332.952942},{536.786621,333.460663},{540.131714,333.703400},{542.945435,333.100342},{542.127930,330.837494},{539.028015,330.023499},{536.190796,329.490356},{534.386902,329.228546},{532.565369,328.114624},{527.667419,327.322845},{525.338074,326.499329},{523.032166,326.811981},{519.185059,327.143677},{515.583130,326.904144},{512.249756,327.229492},{509.173279,327.551697},{505.314484,327.315308},{502.745850,327.347076},{500.177246,327.378876},{497.877197,327.975555},{494.561432,329.153076},{490.988831,330.333771},{487.176941,332.369751},{484.912079,334.670746},{482.127655,336.694031},{480.113800,338.707794},{478.864685,340.427948},{476.856689,342.725769},{476.127136,344.723633},{474.370178,346.734192},{473.132751,349.022461},{471.650238,351.882019},{470.167694,354.741547},{468.953766,358.166016},{467.710510,360.170227},{466.239685,363.597870},{465.031616,367.306366},{464.074554,370.727661},{463.111603,373.864868},{461.891815,377.005280},{461.717041,380.985138},{461.034424,385.255371},{461.116516,389.232025},{461.192749,392.924652},{462.057190,397.459869},{463.662872,400.565308},{465.776398,403.380371},{467.638947,406.482635},{470.266235,409.291321},{470.213440,406.734894},{470.405792,403.607208},{470.335419,400.198639},{470.533630,397.354980},{470.480865,394.798553},{470.643890,390.250641},{471.116577,388.255951},{471.548187,384.272919},{471.489563,381.432465},{471.676025,378.020721},{472.387970,375.170715},{472.843048,372.323883},{474.068726,369.467499},{474.535553,367.188782},{475.270935,365.474976},{476.502472,362.902649} };

POINT points21[] = { {98.658127,70.004265},{90.443390,73.588905},{79.762726,78.069702},{72.394913,84.342819},{62.561176,91.512093},{56.032799,99.577522},{47.833031,104.954483},{41.297169,112.123756},{35.600746,121.085350},{29.904320,130.046936},{25.864319,139.904694},{22.671240,152.450928},{17.829224,164.997162},{17.102064,176.647232},{19.672777,188.297302},{19.792542,202.635849},{14.103603,212.493591},{10.880584,221.455185},{7.627623,226.832153},{4.404603,235.793747},{1.998566,243.859177},{2.095875,255.509247},{1.353745,265.367004},{3.924458,277.017059},{9.763102,285.082489},{13.937839,291.355621},{19.746542,295.836426},{25.562731,301.213379},{33.807411,301.213379},{41.227623,301.213379},{48.625381,298.524902},{53.534763,294.044098},{60.085594,288.667145},{64.994980,284.186340},{68.232971,277.017059},{71.470955,269.847809},{73.067497,263.574677},{73.353088,260.395691},{74.198006,257.563385},{75.156425,255.321152},{77.966484,253.786987},{81.220680,253.432953},{83.945824,254.731094},{84.090866,259.097565},{83.689110,262.991974},{83.622925,268.066528},{83.232994,273.377106},{82.840103,278.333649},{83.088791,282.110046},{83.565468,287.184601},{84.047569,294.940247},{85.763870,303.005676},{87.487656,311.967285},{90.867867,321.825043},{91.789650,333.475098},{97.650749,344.229004},{102.679893,354.086761},{107.694069,362.152191},{112.708244,370.217651},{121.859734,380.075378},{128.537811,389.933136},{135.178467,395.310089},{141.017120,403.375519},{149.314194,409.648651},{158.428253,415.025604},{167.534821,419.506409},{177.495819,427.571838},{188.258804,432.948792},{196.533432,436.533417},{206.456985,440.118073},{220.502884,443.702698},{232.884872,445.495026},{245.251907,445.495026},{256.801941,446.391174},{269.993439,446.391174},{278.230621,445.495026},{288.941223,444.598877},{297.987915,441.910370},{306.202667,438.325745},{313.615387,437.429596},{309.552917,444.598877},{305.490479,451.768127},{301.420532,458.041260},{297.365540,466.106689},{291.646667,472.379791},{289.248108,481.341400},{286.032593,491.199158},{283.663971,503.745392},{282.112335,515.395447},{280.530792,523.460876},{279.818604,536.903259},{279.908417,547.657166},{280.837677,560.203430},{283.423370,573.645813},{289.261993,581.711243},{293.459198,590.672852},{296.816956,597.842102},{302.648102,605.011353},{311.777130,612.180664},{321.738129,620.246094},{333.310608,623.830750},{340.760773,627.415344},{351.501312,630.103821},{360.562988,629.207703},{370.456604,629.207703},{377.037354,627.415344},{387.733002,624.726868},{399.253082,622.038391},{407.467834,618.453796},{417.301575,611.284485},{425.516296,607.699829},{430.410706,601.426758},{436.137085,596.049805},{440.199554,588.880493},{448.369385,579.918945},{454.073273,571.853455},{456.471832,562.891907},{460.519318,553.930298},{463.727356,543.176392},{466.103455,531.526306},{467.655090,519.876221},{469.221680,510.018494},{469.139343,500.160736},{467.400604,489.406830},{465.676819,480.445221},{461.472137,470.587494},{458.931366,462.522034},{455.566101,454.456604},{452.223328,449.079651},{447.209167,441.014221},{441.400452,436.533417},{435.569305,429.364166},{430.577576,423.987183},{422.287994,418.610229},{414.845306,415.921753},{406.570679,412.337128},{398.311035,410.544800},{388.394958,407.856323},{381.799225,407.856323},{375.195984,406.960175},{371.081146,407.856323},{362.843933,408.752502},{366.928864,404.271698},{373.479675,398.894745},{377.572083,395.310089},{382.488953,391.725464},{389.039795,386.348511},{393.941681,380.971558},{398.836090,374.698425},{406.181458,365.736847},{410.236420,357.671417},{415.145813,353.190613},{418.376312,345.125183},{423.255768,337.059753},{427.295746,327.201996},{430.541229,320.928864},{432.962250,314.655762},{435.345825,303.901855},{437.886597,311.967285},{438.800873,322.721191},{441.334167,329.890472},{444.699402,337.955902},{449.721069,346.917511},{453.888336,352.294464},{459.734467,361.256042},{464.726166,366.632996},{467.244476,372.009949},{472.228729,376.490753},{478.869385,381.867706},{485.517517,388.140839},{496.287994,394.413940},{504.577606,399.790894},{515.310669,401.583221},{525.226746,404.271698},{530.997986,404.271698},{543.350037,402.479370},{551.579773,400.687042},{560.618958,397.102417},{568.826233,392.621613},{576.194031,386.348511},{586.042725,380.971558},{592.586121,374.698425},{596.648560,367.529175},{601.542969,361.256042},{605.575500,350.502136},{611.294373,344.229004},{614.532349,337.059753},{616.915955,326.305847},{618.475037,315.551910},{619.209717,304.798004},{620.768799,294.044098},{619.876953,285.978668},{618.962708,275.224762},{617.231384,265.367004},{616.317139,254.613083},{613.776367,246.547653},{611.213135,235.793747},{607.015930,226.832153},{602.001770,218.766708},{599.475952,212.493591},{595.293701,205.324326},{589.470032,199.051208},{582.821899,192.778091},{575.356812,187.401138},{567.884155,181.128021},{559.602051,176.647232},{551.334900,173.958755},{543.892273,171.270264},{533.976196,168.581787},{524.884583,165.893311},{514.990967,165.893311},{503.448425,165.893311},{495.218689,167.685638},{487.011444,172.166428},{479.621185,175.751068},{473.055359,179.335709},{467.336487,185.608826},{462.427124,190.089615},{456.693268,194.570419},{453.440308,199.947372},{448.545898,206.220490},{446.124878,212.493591},{442.901855,221.455185},{440.338623,210.701279},{439.454285,203.532013},{439.386902,195.466568},{437.678101,188.297302},{434.282928,176.647232},{431.734650,167.685638},{430.010864,158.724045},{427.470093,150.658600},{424.089874,140.800858},{420.709686,130.943100},{417.329468,121.085350},{413.971710,113.916077},{409.774506,104.954483},{404.760345,96.889046},{400.578125,89.719772},{392.296021,85.238976},{387.296814,78.965858},{379.831696,73.588905},{371.534607,67.315788},{363.252502,62.834991},{354.947937,55.665718},{348.322266,52.081081},{339.223175,48.496445},{335.033447,40.431011},{329.187317,31.469418},{321.692261,22.507824},{314.212158,15.338549},{302.624695,9.961594},{295.991516,5.480797},{286.892426,1.896159},{280.289215,1.000000},{272.861511,0.103841},{262.158386,1.896159},{253.104218,3.688478},{245.698975,5.480797},{240.774628,8.169274},{232.552399,10.857753},{225.169617,15.338549},{219.435760,19.819345},{214.526382,24.300142},{207.983032,30.573257},{201.432190,35.950214},{194.049408,40.431011},{185.842163,44.911808},{178.444397,47.600285},{170.207199,48.496445},{159.511581,51.184921},{149.625443,52.081081},{142.205231,52.081081},{132.334076,54.769558},{127.402229,56.561878},{121.653412,59.250355},{113.423698,61.042675},{106.857895,64.627312} };
POINT points22[] = { {132.431381,65.419632},{123.384682,68.108109},{114.352959,72.588905},{102.847832,77.069702},{94.655548,83.342819},{84.799362,87.823616},{78.248528,93.200569},{70.880714,99.473686},{64.344849,106.642960},{56.977032,112.916077},{49.616703,120.085350},{45.561729,128.150787},{38.216370,137.112381},{30.900949,149.658600},{26.890888,163.100998},{24.507307,173.854904},{24.597130,184.608826},{25.511421,195.362732},{31.245272,190.881927},{41.093979,185.504974},{47.659782,181.920334},{58.377865,181.920334},{66.652489,185.504974},{73.263206,187.297302},{78.277382,195.362732},{82.452118,201.635849},{85.000374,210.597443},{84.243271,218.662872},{84.318123,227.624466},{81.897118,233.897583},{79.483597,241.066849},{86.086823,241.963013},{91.835648,239.274536},{98.393967,234.793747},{104.135300,231.209106},{112.335068,225.832153},{118.893387,221.351349},{123.802773,216.870560},{127.048248,210.597443},{131.950150,205.220490},{135.136719,202.863922},{138.761108,198.084396},{137.817230,202.067337},{136.156006,207.908966},{134.226105,210.829773},{131.081436,214.547180},{128.924988,219.592224},{128.713974,223.575150},{131.187897,227.292557},{133.186539,232.603134},{134.700500,238.378372},{137.256241,248.236130},{138.178024,259.886200},{139.931747,272.432434},{141.663025,282.290192},{142.554855,290.355621},{142.629715,299.317200},{144.405899,314.551910},{145.312698,324.409668},{144.570572,334.267426},{143.018951,345.917511},{137.277618,349.502136},{130.651932,345.917511},{124.843224,341.436707},{120.668488,335.163574},{115.676765,329.786621},{113.173416,326.201996},{110.640137,319.032715},{108.099365,310.967285},{105.566078,303.798004},{103.864738,297.524902},{102.148438,289.459473},{101.264091,282.290192},{101.196724,274.224762},{100.327339,268.847809},{99.428024,259.886200},{99.368141,252.716934},{100.214867,248.070175},{94.121002,249.663345},{89.248573,251.256516},{89.310669,258.691315},{89.370552,265.860596},{89.437088,273.826447},{89.761223,283.385498},{91.562157,294.272156},{94.340248,305.158844},{96.356644,312.593628},{99.116989,321.356079},{102.870003,331.977234},{106.697441,340.540527},{111.741554,352.190613},{118.412155,361.152191},{125.082748,370.113800},{134.219269,378.179230},{140.050430,385.348511},{145.874100,391.621613},{152.537216,399.687042},{159.177872,405.064026},{166.628021,408.648651},{173.223770,408.648651},{172.301987,396.998566},{173.074066,390.725464},{171.335297,379.971558},{176.341995,387.140839},{182.990128,393.413940},{187.157379,398.790894},{195.476913,407.752502},{201.293106,413.129456},{210.414658,419.402557},{215.413864,425.675690},{225.344910,430.156464},{234.458969,435.533417},{245.184540,436.429596},{254.276138,439.118073},{264.979248,437.325745},{272.384491,435.533417},{282.233185,430.156464},{287.097656,420.298706},{291.145172,411.337128},{294.368164,402.375519},{295.957245,395.206268},{296.676910,382.660034},{297.389099,369.217651},{298.168640,363.840668},{297.239380,351.294464},{296.340057,342.332855},{295.425781,331.578949},{292.840088,318.136566},{292.772736,310.071136},{289.392517,300.213379},{287.653748,289.459473},{283.426636,276.913239},{280.023956,264.367004},{277.453247,252.716934},{272.431580,243.755341},{266.585449,234.793747},{262.388275,225.832153},{259.008057,215.974396},{252.352417,208.805115},{248.972214,198.947372},{253.956451,203.428162},{258.948181,208.805115},{266.405823,213.285919},{274.717865,221.351349},{283.846893,228.520630},{291.289551,231.209106},{302.045074,235.689896},{311.136658,238.378372},{321.877228,241.066849},{333.434723,242.859177},{343.328339,242.859177},{357.329346,241.066849},{369.673920,238.378372},{379.522614,233.001419},{389.371307,227.624466},{395.914673,221.351349},{404.916443,213.285919},{411.414886,201.635849},{413.790985,189.985779},{417.014008,181.024185},{419.397583,170.270264},{418.483276,159.516357},{416.744537,148.762451},{413.371796,139.800858},{411.655487,131.735413},{409.122223,124.566147},{404.932495,116.500710},{402.391724,108.435280},{397.385040,101.266006},{390.721924,93.200569},{384.073792,86.927452},{376.608673,81.550499},{373.273376,77.069702},{366.632721,71.692749},{360.824005,67.211952},{355.839783,62.731152},{350.870514,60.042675},{348.347168,57.719303},{344.174316,55.329544},{343.965546,59.578007},{345.957520,64.091995},{347.698578,67.809395},{349.206451,72.854439},{347.234406,70.730209},{345.255707,67.809395},{344.009888,64.888580},{342.517548,61.702236},{339.561707,58.781418},{337.336517,55.595074},{336.090698,52.674259},{333.130402,49.222385},{329.277161,41.223328},{325.109894,35.846375},{319.308685,32.261734},{312.660522,25.988621},{306.851837,21.507824},{300.226135,17.923187},{291.944031,13.442389},{282.852448,10.753912},{272.943848,8.961594},{263.057709,9.857753},{252.354599,11.650071},{243.315399,15.234709},{235.108139,19.715506},{229.366806,23.300142},{221.159546,27.780939},{214.616196,34.054054},{207.233414,38.534851},{203.972961,43.015648},{196.597672,48.392605},{204.032852,50.184921},{211.453064,50.184921},{216.354965,44.807964},{222.096298,41.223328},{228.647125,35.846375},{236.854385,31.365576},{245.893585,27.780939},{254.108337,24.196302},{265.628418,21.507824},{278.849854,25.092461},{290.414856,27.780939},{297.857544,30.469418},{304.520660,38.534851},{310.344330,44.807964},{316.167999,51.081081},{321.212128,62.731152},{323.782837,74.381226},{326.361023,86.927452},{324.839325,102.162163},{324.951630,115.604553},{321.743561,126.358467},{321.840881,138.008530},{321.945679,150.554764},{323.691925,162.204834},{328.721069,172.062592},{336.943298,169.374115},{341.852661,164.893311},{347.601501,162.204834},{350.023834,159.748703},{353.910248,157.093414},{352.009186,163.466110},{349.848297,167.980087},{346.703613,171.697495},{342.830505,175.945953},{338.455536,178.601242},{334.324829,181.256531},{330.200806,184.708405},{326.305511,186.301575},{319.483215,188.425797},{315.830017,189.753448},{311.923645,190.018982},{306.802490,191.081085},{301.676880,191.612152},{297.761658,190.815567},{294.583710,190.550034},{291.887665,189.487915},{288.707520,188.956863},{291.623444,187.098160},{295.041229,186.832626},{299.144989,184.608826},{304.908783,183.712662},{303.987030,172.062592},{301.453735,164.893311},{300.554413,155.931717},{298.013641,147.866287},{295.472870,139.800858},{292.092651,129.943100},{288.742401,123.669983},{284.582611,119.189186},{280.400391,112.019913},{277.867126,104.850639},{272.882874,100.369843},{266.227264,93.200569},{262.884460,87.823616},{256.258789,84.238976},{250.435104,77.965858},{245.465836,75.277382},{240.504059,73.485062},{230.573013,69.004265},{224.786774,67.211952},{216.504669,62.731152},{207.428024,61.834991},{199.160889,59.146515},{190.091751,59.146515},{182.649078,56.458038},{174.404404,56.458038},{167.816132,57.354195},{156.288559,59.146515},{149.700302,60.042675},{141.470581,61.834991} };
POINT points23[] = { {114.461151,237.837860},{110.117393,240.495712},{106.998543,243.691223},{104.594711,245.820618},{104.656006,250.093567},{104.523659,257.837585},{105.106331,264.515472},{105.673683,270.125153},{106.256355,276.803040},{107.805161,282.949646},{109.353966,289.096252},{110.172424,295.240753},{111.721230,301.387360},{113.254707,306.465729},{114.784355,311.277039},{117.291634,316.358246},{119.057068,320.636139},{120.818672,324.647003},{122.572617,328.123718},{124.318893,331.066315},{127.042801,334.278839},{129.519424,337.223541},{132.235672,339.901947},{133.955124,340.975128},{136.910980,343.387146},{139.345474,343.394226},{140.250305,338.589996},{139.705933,334.582703},{139.880432,329.776337},{139.594833,326.837982},{139.050476,322.830658},{138.494614,318.022186},{138.201370,314.549713},{137.668503,311.343567},{137.356094,306.535797},{136.560608,301.993683},{136.506973,298.254852},{136.179245,292.378815},{135.631058,288.104462},{135.577423,284.365631},{135.040726,280.892456},{134.256744,277.151489},{133.974976,274.480194},{133.677902,270.740662},{132.893921,266.999695},{130.756516,270.732147},{127.622337,272.859436},{124.689468,272.049774},{121.988548,270.439606},{120.006477,268.030426},{118.260201,265.087830},{117.000816,262.146637},{116.464119,258.673431},{115.212395,256.266357},{114.424583,252.258347},{114.614395,248.520233},{114.572258,245.582581},{114.510956,241.309631} };
POINT points24[] = { {271.643219,32.383430},{267.568817,32.029392},{264.474518,32.029392},{260.893127,32.206409},{258.456177,32.914486},{255.204926,33.622562},{252.608078,34.684677},{250.011215,35.746792},{250.366501,39.287174},{251.373230,42.827560},{253.028412,46.013905},{254.017395,47.430058},{256.321075,50.262363},{258.293091,52.386593},{259.940887,54.687840},{262.071350,56.281013},{264.367645,58.228222},{266.665375,60.352451},{268.307281,61.945625},{270.596161,63.007740},{273.049377,64.246872},{275.666931,65.663025},{277.621216,65.663025},{276.780334,62.476681},{276.596771,59.998413},{276.245911,56.989090},{275.733673,54.156784},{275.711517,51.501495},{275.533844,49.731304},{276.158661,46.544960},{277.652496,49.908325},{278.983459,53.271687},{280.147095,56.103992},{280.823669,59.113319},{282.310089,61.591587},{283.148041,64.423889},{284.635956,67.079178},{285.465027,68.849373},{286.624237,71.150620},{287.460724,73.805908},{289.111481,76.461189},{290.762238,79.116478},{292.415955,82.125801},{294.392426,84.781090},{295.875885,86.905319},{297.526642,89.560608},{299.332855,91.330795},{300.982147,93.809067},{302.795746,96.464355},{304.767792,98.588585},{306.736877,100.358772},{308.541626,101.951942},{310.183502,103.545120},{312.311005,104.784248},{314.272705,105.669350},{316.727386,107.085503},{317.023529,103.545120},{317.645386,100.004738},{317.784607,97.172432},{318.243591,93.632050},{318.054138,90.445702},{318.030457,87.613396},{317.842468,84.604073},{317.490143,81.417725},{317.460571,77.877342},{316.788452,75.399078},{315.780243,71.681679},{315.593719,68.849373},{314.924561,66.725143},{313.934113,65.131966},{313.423340,62.476681},{312.755646,60.529472},{311.926575,58.759281},{310.601532,56.103992},{309.445251,54.156784},{308.123169,51.855534},{306.972839,50.616402},{305.000793,48.492172},{302.868835,46.721981},{301.064117,45.128807},{298.930695,43.181599},{297.296204,42.473522},{295.817169,40.880348},{292.872406,39.287174},{291.887878,38.402081},{290.416229,37.694004},{288.938690,36.277851},{287.465576,35.392754},{284.850983,34.330639},{283.050659,33.268524},{280.766235,32.737469},{278.484741,32.560448},{277.180389,32.383430},{275.061768,32.206409} };
POINT points25[] = { {161.873260,212.290192},{157.519348,217.467987},{155.373993,223.840683},{153.595078,230.213364},{151.826126,237.780945},{150.443573,247.738266},{150.153671,256.899017},{149.480682,264.068268},{149.537247,270.839264},{151.072830,279.203400},{151.525757,289.559021},{153.054688,297.126587},{154.946716,304.295868},{156.475647,311.863434},{158.734116,319.032715},{161.742065,328.193451},{165.093170,334.566132},{168.827332,342.930298},{172.914627,349.701294},{176.635483,356.472260},{181.442322,361.650085},{185.143219,366.031281},{190.306503,370.014221},{195.473129,374.395447},{200.263336,377.581787},{206.855759,377.183502},{210.120361,373.200562},{212.632141,366.827881},{214.417725,361.251770},{214.730927,354.879089},{215.773651,348.108093},{214.984238,341.337128},{214.557922,334.167847},{213.415390,328.990051},{213.355499,321.820770},{211.097046,314.651489},{209.578094,308.278809},{208.045837,300.312958},{206.886658,293.143677},{205.371033,287.169281},{204.211868,280.000000},{201.973358,275.220490},{200.447754,268.051208},{199.674973,263.271698},{197.796249,257.695587},{195.927505,253.314362},{194.781647,247.738266},{192.916214,243.755341},{189.568451,237.780945},{188.062805,233.001419},{186.190735,228.221909},{182.852936,223.442383},{180.984192,219.061172},{177.639740,213.485062},{174.688339,211.095306},{171.007401,209.103836},{164.408340,208.705551} };
POINT points26[] = { {169.327637,260.251312},{167.571060,254.675201},{166.052109,248.302521},{165.015076,241.133240},{163.998001,236.353729},{163.456207,229.981033},{162.925491,224.935989},{162.881134,219.625412},{160.247208,225.998108},{158.836929,232.636322},{157.688690,241.398773},{157.515366,249.895691},{156.606979,258.127075},{156.176071,265.030823},{156.213776,269.544800},{156.513504,276.183014},{157.308472,283.617828},{158.352142,291.583679},{160.126480,299.284027},{161.412231,306.984344},{163.917191,314.419159},{166.668671,322.119476},{169.417923,329.554291},{172.655746,336.989105},{176.140091,344.689423},{180.836975,351.327637},{185.285156,357.434814},{189.233673,362.214325},{194.399170,366.462769},{199.562469,370.445709},{205.192154,371.773346},{208.065933,364.869598},{208.963242,355.310577},{208.896698,347.344727},{208.354904,340.972015},{207.315659,333.537231},{205.057190,326.367950},{203.771439,318.667603},{201.759476,311.763885},{199.994019,305.125641},{198.703842,296.894257},{196.445374,289.724976},{194.684357,283.617828},{193.909348,278.572784},{192.892288,273.793274},{192.370438,269.810333},{191.113525,265.561890},{190.096451,260.782379},{187.684631,264.499756},{186.514206,270.606934},{183.360657,273.262207},{179.198914,272.200104},{175.758942,269.810333},{173.296112,267.420593},{171.557266,263.968719} };

void draw_Polygons1(POINT pointl[], int len);//第一块主区域染色
void draw_Polygons2(POINT pointl[], int len, POINT point2[], int len2, POINT point3[], int len3, POINT point4[], int len4);//与第二块主区域第一部分相交
void draw_Polygons3(POINT pointl[], int len);//第一块主区域镂空区域染色
void draw_Polygons4(POINT pointl[], int len, POINT point2[], int len2);//与第二块主区域第二部分相交

int main() {
	initgraph(635, 635, EW_SHOWCONSOLE);
	setorigin(0, 634);
	setbkcolor(WHITE);

	cleardevice();
	/* 设置x,y轴坐标方向 电脑是以左上角为坐标原点 至左向右为x轴正方向这里不变设置第一个参数为1，至上而下为y轴正方向，与我们所熟悉的笛卡尔坐标相反，这里设置为-1 */
	setaspectratio(1, -1);                 //设置y轴正方向

	int cond = 5;//1、panda原图；2、mouse原图；3、panda补；4、mouse补；5、panda与mouse交；6、panda与mouse并。
	if (cond == 1) {
		draw_Polygons1(points11, sizeof(points11) / sizeof(POINT));
		draw_Polygons3(points12, sizeof(points12) / sizeof(POINT));
		draw_Polygons3(points13, sizeof(points13) / sizeof(POINT));
		draw_Polygons1(points14, sizeof(points14) / sizeof(POINT));
		draw_Polygons3(points15, sizeof(points15) / sizeof(POINT));
		draw_Polygons1(points16, sizeof(points16) / sizeof(POINT));
		draw_Polygons3(points17, sizeof(points17) / sizeof(POINT));
		draw_Polygons1(points18, sizeof(points18) / sizeof(POINT));
		draw_Polygons1(points19, sizeof(points19) / sizeof(POINT));
		draw_Polygons1(points110, sizeof(points110) / sizeof(POINT));
	}
	else if (cond == 2) {
		draw_Polygons1(points21, sizeof(points21) / sizeof(POINT));
		draw_Polygons3(points22, sizeof(points22) / sizeof(POINT));
		draw_Polygons3(points23, sizeof(points23) / sizeof(POINT));
		draw_Polygons3(points24, sizeof(points24) / sizeof(POINT));
		draw_Polygons1(points25, sizeof(points25) / sizeof(POINT));
		draw_Polygons3(points26, sizeof(points26) / sizeof(POINT));
	}
	else if (cond == 3) {
		setbkcolor(YELLOW);
		cleardevice();
		draw_Polygons3(points11, sizeof(points11) / sizeof(POINT));
		draw_Polygons1(points12, sizeof(points12) / sizeof(POINT));
		draw_Polygons1(points13, sizeof(points13) / sizeof(POINT));
		draw_Polygons3(points14, sizeof(points14) / sizeof(POINT));
		draw_Polygons1(points15, sizeof(points15) / sizeof(POINT));
		draw_Polygons3(points16, sizeof(points16) / sizeof(POINT));
		draw_Polygons1(points17, sizeof(points17) / sizeof(POINT));
		draw_Polygons3(points18, sizeof(points18) / sizeof(POINT));
		draw_Polygons3(points19, sizeof(points19) / sizeof(POINT));
		draw_Polygons3(points110, sizeof(points110) / sizeof(POINT));
	}
	else if (cond == 4) {
		setbkcolor(YELLOW);
		cleardevice();
		draw_Polygons3(points21, sizeof(points21) / sizeof(POINT));
		draw_Polygons1(points22, sizeof(points22) / sizeof(POINT));
		draw_Polygons1(points23, sizeof(points23) / sizeof(POINT));
		draw_Polygons1(points24, sizeof(points24) / sizeof(POINT));
		draw_Polygons3(points25, sizeof(points25) / sizeof(POINT));
		draw_Polygons1(points26, sizeof(points26) / sizeof(POINT));
	}
	else if (cond == 5) {
		draw_Polygons1(points11, sizeof(points11) / sizeof(POINT));
		draw_Polygons3(points12, sizeof(points12) / sizeof(POINT));
		draw_Polygons3(points13, sizeof(points13) / sizeof(POINT));
		draw_Polygons1(points14, sizeof(points14) / sizeof(POINT));
		draw_Polygons3(points15, sizeof(points15) / sizeof(POINT));
		draw_Polygons1(points16, sizeof(points16) / sizeof(POINT));
		draw_Polygons3(points17, sizeof(points17) / sizeof(POINT));
		draw_Polygons1(points18, sizeof(points18) / sizeof(POINT));
		draw_Polygons1(points19, sizeof(points19) / sizeof(POINT));
		draw_Polygons1(points110, sizeof(points110) / sizeof(POINT));

		draw_Polygons2(points21, sizeof(points21) / sizeof(POINT), points22, sizeof(points22) / sizeof(POINT), points23, sizeof(points23) / sizeof(POINT), points24, sizeof(points24) / sizeof(POINT));
		draw_Polygons4(points25, sizeof(points25) / sizeof(POINT), points26, sizeof(points26) / sizeof(POINT));

		for (int x = 0; x < 700; x++) {
			for (int y = 0; y < 700; y++) {
				if (getpixel(x, y) == BLUE || getpixel(x, y) == YELLOW) {
					setfillcolor(WHITE);
					floodfill(x, y, BLACK, 0);
				}
			}
		}
		for (int x = 0; x < 700; x++) {
			for (int y = 0; y < 700; y++) {
				if (getpixel(x, y) == GREEN) {
					setfillcolor(YELLOW);
					floodfill(x, y, BLACK, 0);
				}
			}
		}
	}
	else {
		draw_Polygons1(points11, sizeof(points11) / sizeof(POINT));
		draw_Polygons3(points12, sizeof(points12) / sizeof(POINT));
		draw_Polygons3(points13, sizeof(points13) / sizeof(POINT));
		draw_Polygons1(points14, sizeof(points14) / sizeof(POINT));
		draw_Polygons3(points15, sizeof(points15) / sizeof(POINT));
		draw_Polygons1(points16, sizeof(points16) / sizeof(POINT));
		draw_Polygons3(points17, sizeof(points17) / sizeof(POINT));
		draw_Polygons1(points18, sizeof(points18) / sizeof(POINT));
		draw_Polygons1(points19, sizeof(points19) / sizeof(POINT));
		draw_Polygons1(points110, sizeof(points110) / sizeof(POINT));

		draw_Polygons2(points21, sizeof(points21) / sizeof(POINT), points22, sizeof(points22) / sizeof(POINT), points23, sizeof(points23) / sizeof(POINT), points24, sizeof(points24) / sizeof(POINT));
		draw_Polygons4(points25, sizeof(points25) / sizeof(POINT), points26, sizeof(points26) / sizeof(POINT));

		for (int x = 0; x < 700; x++) {
			for (int y = 0; y < 700; y++) {
				if (getpixel(x, y) == GREEN || getpixel(x, y) == BLUE) {
					setfillcolor(YELLOW);
					floodfill(x, y, BLACK, 0);
				}
			}
		}
	}

	getchar();
}

void draw_Polygons1(POINT pointl[], int len)
{
	struct toppoint
	{
		int ymin;
		int ymax;
		int xmin;
		char flag;
		float slope;
	};
	int y;
	int num = 0, i, j;
	float min, max;
	struct toppoint* ET = (struct toppoint*)malloc(len * sizeof(struct toppoint));
	float* xstack = (float*)malloc((len + 1) * sizeof(float));
	for (num = 0, min = pointl[0].y; num < len; num++)
	{
		if (min > pointl[num].y) min = pointl[num].y;
	}

	for (num = 0, max = pointl[0].y; num < len; num++)
	{
		if (max < pointl[num].y) max = pointl[num].y;
	}
	for (num = 0; num < len; num++)
	{
		ET[num].flag = 0;
		ET[num].ymin = (pointl[num].y > pointl[(num + 1) % len].y ? pointl[(num + 1) % len].y : pointl[num].y);
		ET[num].ymax = (pointl[num].y < pointl[(num + 1) % len].y ? pointl[(num + 1) % len].y : pointl[num].y);
		ET[num].xmin = (pointl[num].y > pointl[(num + 1) % len].y ? pointl[(num + 1) % len].x : pointl[num].x);

		ET[num].slope = (((float)(pointl[(num + 1) % len].y - pointl[num].y) == 0) ? 0 : (float)(pointl[(num + 1) % len].x - pointl[num].x) / (float)(pointl[(num + 1) % len].y - pointl[num].y));

	}

	setlinecolor(YELLOW);

	for (y = min; y <= max; y++)
	{
		i = 1;
		for (num = 0; num < len; num++)
		{
			if (ET[num].flag == 0 && y > ET[num].ymin)
			{
				if (ET[num].ymax < y)
				{
					ET[num].flag = 1;
				}
				else
				{
					xstack[i++] = ET[num].xmin + ET[num].slope * (y - ET[num].ymin);
				}
			}
		}
		xstack[0] = i - 1;
		for (i = 1; i < xstack[0]; i++)
		{
			for (j = 1; j < xstack[0] + 1 - i; j++)
			{
				if (xstack[j] > xstack[j + 1])
				{
					num = xstack[j];
					xstack[j] = xstack[j + 1];
					xstack[j + 1] = num;
				}
			}
		}
		for (num = 1; num <= xstack[0]; num += 2)
		{
			line(xstack[num], y, xstack[num + 1], y);
		}
	}
	setlinecolor(BLACK);
	for (num = 0; num <= len - 1; num++)
	{
		line(pointl[num % len].x, pointl[num % len].y, pointl[(num + 1) % len].x, pointl[(num + 1) % len].y);
	}
}

void draw_Polygons2(POINT pointl[], int len, POINT point2[], int len2, POINT point3[], int len3, POINT point4[], int len4) {
	struct toppoint
	{
		int ymin;
		int ymax;
		int xmin;
		char flag;
		float slope;
	};
	int y;
	int num = 0, i, j;
	int min, max, min2, max2, min3, max3, min4, max4;
	struct toppoint* ET = (struct toppoint*)malloc(len * sizeof(struct toppoint));
	struct toppoint* ET2 = (struct toppoint*)malloc(len2 * sizeof(struct toppoint));
	struct toppoint* ET3 = (struct toppoint*)malloc(len3 * sizeof(struct toppoint));
	struct toppoint* ET4 = (struct toppoint*)malloc(len4 * sizeof(struct toppoint));

	int* xstack = (int*)malloc((len + len2 + len3 + len4 + 1) * sizeof(int));

	for (num = 0, min = pointl[0].y; num < len; num++)
	{
		if (min > pointl[num].y) min = pointl[num].y;
	}

	for (num = 0, max = pointl[0].y; num < len; num++)
	{
		if (max < pointl[num].y) max = pointl[num].y;
	}

	for (num = 0, min2 = point2[0].y; num < len2; num++)
	{
		if (min2 > point2[num].y) min2 = point2[num].y;
	}

	for (num = 0, max2 = point2[0].y; num < len2; num++)
	{
		if (max2 < point2[num].y) max2 = point2[num].y;
	}

	for (num = 0, min3 = point3[0].y; num < len3; num++)
	{
		if (min > point3[num].y) min3 = point3[num].y;
	}

	for (num = 0, max3 = point3[0].y; num < len3; num++)
	{
		if (max3 < point3[num].y) max3 = point3[num].y;
	}

	for (num = 0, min4 = point4[0].y; num < len4; num++)
	{
		if (min4 > point4[num].y) min4 = point4[num].y;
	}

	for (num = 0, max4 = point4[0].y; num < len4; num++)
	{
		if (max4 < point4[num].y) max4 = point4[num].y;
	}

	//生成ET表
	for (num = 0; num < len; num++)
	{
		ET[num].flag = 0;
		ET[num].ymin = (pointl[num].y > pointl[(num + 1) % len].y ? pointl[(num + 1) % len].y : pointl[num].y);
		ET[num].ymax = (pointl[num].y < pointl[(num + 1) % len].y ? pointl[(num + 1) % len].y : pointl[num].y);
		ET[num].xmin = (pointl[num].y > pointl[(num + 1) % len].y ? pointl[(num + 1) % len].x : pointl[num].x);
		ET[num].slope = (((float)(pointl[(num + 1) % len].y - pointl[num].y) == 0) ? 0 : (float)(pointl[(num + 1) % len].x - pointl[num].x) / (float)(pointl[(num + 1) % len].y - pointl[num].y));
	}
	for (num = 0; num < len2; num++)
	{
		ET2[num].flag = 0; //没有使用过（不用数据结构去做浪费空间，要编写大量的代码删除将该标志位置一）;
		ET2[num].ymin = (point2[num].y > point2[(num + 1) % len2].y ? point2[(num + 1) % len2].y : point2[num].y);  //两者中的最小值;
		ET2[num].ymax = (point2[num].y < point2[(num + 1) % len2].y ? point2[(num + 1) % len2].y : point2[num].y);  //两者中的最大值;
		ET2[num].xmin = (point2[num].y > point2[(num + 1) % len2].y ? point2[(num + 1) % len2].x : point2[num].x);
		/* 警惕除数为零的情况 */
		ET2[num].slope = (((float)(point2[(num + 1) % len2].y - point2[num].y) == 0) ? 0 : (float)(point2[(num + 1) % len2].x - point2[num].x) / (float)(point2[(num + 1) % len2].y - point2[num].y));
	}
	for (num = 0; num < len3; num++)
	{
		ET3[num].flag = 0; //没有使用过（不用数据结构去做浪费空间，要编写大量的代码删除将该标志位置一）;
		ET3[num].ymin = (point3[num].y > point3[(num + 1) % len3].y ? point3[(num + 1) % len3].y : point3[num].y);  //两者中的最小值;
		ET3[num].ymax = (point3[num].y < point3[(num + 1) % len3].y ? point3[(num + 1) % len3].y : point3[num].y);  //两者中的最大值;
		ET3[num].xmin = (point3[num].y > point3[(num + 1) % len3].y ? point3[(num + 1) % len3].x : point3[num].x);
		/* 警惕除数为零的情况 */
		ET3[num].slope = (((float)(point3[(num + 1) % len3].y - point3[num].y) == 0) ? 0 : (float)(point3[(num + 1) % len3].x - point3[num].x) / (float)(point3[(num + 1) % len3].y - point3[num].y));
	}
	for (num = 0; num < len4; num++)
	{
		ET4[num].flag = 0; //没有使用过（不用数据结构去做浪费空间，要编写大量的代码删除将该标志位置一）;
		ET4[num].ymin = (point4[num].y > point4[(num + 1) % len4].y ? point4[(num + 1) % len4].y : point4[num].y);  //两者中的最小值;
		ET4[num].ymax = (point4[num].y < point4[(num + 1) % len4].y ? point4[(num + 1) % len4].y : point4[num].y);  //两者中的最大值;
		ET4[num].xmin = (point4[num].y > point4[(num + 1) % len4].y ? point4[(num + 1) % len4].x : point4[num].x);
		/* 警惕除数为零的情况 */
		ET4[num].slope = (((float)(point4[(num + 1) % len4].y - point4[num].y) == 0) ? 0 : (float)(point4[(num + 1) % len4].x - point4[num].x) / (float)(point4[(num + 1) % len4].y - point4[num].y));
	}

	setlinecolor(BLACK);

	for (num = 0; num <= len - 1; num++)
	{

		line(pointl[num % len].x, pointl[num % len].y, pointl[(num + 1) % len].x, pointl[(num + 1) % len].y);
	}
	for (num = 0; num <= len2 - 1; num++)
	{
		//	 画线 
		line(point2[num % len2].x, point2[num % len2].y, point2[(num + 1) % len2].x, point2[(num + 1) % len2].y);
	}
	for (num = 0; num <= len3 - 1; num++)
	{
		//	 画线 
		line(point3[num % len3].x, point3[num % len3].y, point3[(num + 1) % len3].x, point3[(num + 1) % len3].y);
	}
	for (num = 0; num <= len4 - 1; num++)
	{
		//	 画线 
		line(point4[num % len4].x, point4[num % len4].y, point4[(num + 1) % len4].x, point4[(num + 1) % len4].y);
	}

	//printf("%d %d", min, max);
	for (y = min; y <= max; y++) {

		i = 1;
		for (num = 0; num < len; num++)   //开始推算 xstack值
		{
			if (ET[num].flag == 0 && y > ET[num].ymin) //没有被用过
			{
				if (ET[num].ymax < y)  //失效
				{
					ET[num].flag = 1; //已经使用过了不用再使用；
				}
				else
				{
					//利用递增的算出下一个x坐标位置
					xstack[i++] = ET[num].xmin + ET[num].slope * (y - ET[num].ymin);
				}
			}
		}
		for (num = 0; num < len2; num++)   //开始推算 xstack值
		{
			if (ET2[num].flag == 0 && y > ET2[num].ymin) //没有被用过
			{
				if (ET2[num].ymax < y)  //失效
				{
					ET2[num].flag = 1; //已经使用过了不用再使用；
				}
				else
				{
					//利用递增的算出下一个x坐标位置
					xstack[i++] = ET2[num].xmin + ET2[num].slope * (y - ET2[num].ymin);
				}
			}
		}
		for (num = 0; num < len3; num++)   //开始推算 xstack值
		{
			if (ET3[num].flag == 0 && y > ET3[num].ymin) //没有被用过
			{
				if (ET3[num].ymax < y)  //失效
				{
					ET3[num].flag = 1; //已经使用过了不用再使用；
				}
				else
				{
					//利用递增的算出下一个x坐标位置
					xstack[i++] = ET3[num].xmin + ET3[num].slope * (y - ET3[num].ymin);
				}
			}
		}
		for (num = 0; num < len4; num++)   //开始推算 xstack值
		{
			if (ET4[num].flag == 0 && y > ET4[num].ymin) //没有被用过
			{
				if (ET4[num].ymax < y)  //失效
				{
					ET4[num].flag = 1; //已经使用过了不用再使用；
				}
				else
				{
					//利用递增的算出下一个x坐标位置
					xstack[i++] = ET4[num].xmin + ET4[num].slope * (y - ET4[num].ymin);
				}
			}
		}

		xstack[0] = i - 1;
		//printf("y=%d ", y);

		for (i = 1; i < xstack[0]; i++)
		{
			for (j = 1; j < xstack[0] + 1 - i; j++)
			{
				if (xstack[j] > xstack[j + 1])
				{
					num = xstack[j];
					xstack[j] = xstack[j + 1];
					xstack[j + 1] = num;
				}
			}
		}
		/*for (i = 1; i <= xstack[0]; i++) {
			printf("%d ", xstack[i]);
		}*/

		for (num = 1; num <= xstack[0]; num += 2) {
			int testx;
			for (testx = xstack[num] + 1; testx <= xstack[num + 1] - 2; testx++) {
				//printf("x=%d,y=%d \n", testx, y);
				if (getpixel(testx, y) == YELLOW && getpixel(testx + 1, y) == YELLOW) {
					setfillcolor(GREEN);
					floodfill(testx, y, BLACK, 0);
				}
				if (getpixel(testx, y) == WHITE && getpixel(testx + 1, y) == WHITE) {
					setfillcolor(BLUE);
					floodfill(testx, y, BLACK, 0);
				}
			}
		}

		/*for (num = 1; num <=xstack[0]; num++) {
			printf("xstack[%d]=%d ", num, xstack[num]);
		}
		printf("\n");*/
	}
	setfillcolor(WHITE);
	floodfill(1, 1, BLACK, 0);

}

void draw_Polygons3(POINT pointl[], int len)
{
	struct toppoint
	{
		int ymin;
		int ymax;
		int xmin;
		char flag;
		float slope;
	};
	float y;
	int num = 0, i, j;
	float min, max;

	struct toppoint* ET = (struct toppoint*)malloc(len * sizeof(struct toppoint));
	float* xstack = (float*)malloc((len + 1) * sizeof(float));

	for (num = 0, min = pointl[0].y; num < len; num++)
	{
		if (min > pointl[num].y) min = pointl[num].y;
	}
	for (num = 0, max = pointl[0].y; num < len; num++)
	{
		if (max < pointl[num].y) max = pointl[num].y;
	}

	for (num = 0; num < len; num++)
	{
		ET[num].flag = 0;
		ET[num].ymin = (pointl[num].y > pointl[(num + 1) % len].y ? pointl[(num + 1) % len].y : pointl[num].y);
		ET[num].ymax = (pointl[num].y < pointl[(num + 1) % len].y ? pointl[(num + 1) % len].y : pointl[num].y);
		ET[num].xmin = (pointl[num].y > pointl[(num + 1) % len].y ? pointl[(num + 1) % len].x : pointl[num].x);
		ET[num].slope = (((float)(pointl[(num + 1) % len].y - pointl[num].y) == 0) ? 0 : (float)(pointl[(num + 1) % len].x - pointl[num].x) / (float)(pointl[(num + 1) % len].y - pointl[num].y));

	}
	//设置填充颜色
	setlinecolor(WHITE);

	for (y = min; y <= max; y++)
	{
		i = 1;
		for (num = 0; num < len; num++)
		{
			if (ET[num].flag == 0 && y > ET[num].ymin)
			{
				if (ET[num].ymax < y)
				{
					ET[num].flag = 1;
				}
				else
				{
					xstack[i++] = ET[num].xmin + ET[num].slope * (y - ET[num].ymin);
				}
			}
		}
		xstack[0] = i - 1;
		for (i = 1; i < xstack[0]; i++)
		{
			for (j = 1; j < xstack[0] + 1 - i; j++)
			{
				if (xstack[j] > xstack[j + 1])
				{
					num = xstack[j];
					xstack[j] = xstack[j + 1];
					xstack[j + 1] = num;
				}
			}
		}
		for (num = 1; num <= xstack[0]; num += 2)
		{

			line(xstack[num], y, xstack[num + 1], y);
		}
	}
	setlinecolor(BLACK);
	for (num = 0; num <= len - 1; num++)
	{
		// 画线 
		line(pointl[num % len].x, pointl[num % len].y, pointl[(num + 1) % len].x, pointl[(num + 1) % len].y);
	}
}

void draw_Polygons4(POINT pointl[], int len, POINT point2[], int len2) {
	struct toppoint
	{
		int ymin;
		int ymax;
		int xmin;
		char flag;
		float slope;
	};
	int y;
	int num = 0, i, j;
	int min, max;

	struct toppoint* ET = (struct toppoint*)malloc(len * sizeof(struct toppoint));  //申请len个边表信息;
	struct toppoint* ET2 = (struct toppoint*)malloc(len2 * sizeof(struct toppoint));

	int* xstack = (int*)malloc((len + len2 + 1) * sizeof(int));
	for (num = 0, min = pointl[0].y; num < len; num++)
	{
		if (min > pointl[num].y) min = pointl[num].y;
	}

	for (num = 0, max = pointl[0].y; num < len; num++)
	{
		if (max < pointl[num].y) max = pointl[num].y;
	}

	for (num = 0; num < len; num++)
	{
		ET[num].flag = 0;
		ET[num].ymin = (pointl[num].y > pointl[(num + 1) % len].y ? pointl[(num + 1) % len].y : pointl[num].y);
		ET[num].ymax = (pointl[num].y < pointl[(num + 1) % len].y ? pointl[(num + 1) % len].y : pointl[num].y);
		ET[num].xmin = (pointl[num].y > pointl[(num + 1) % len].y ? pointl[(num + 1) % len].x : pointl[num].x);

		ET[num].slope = (((float)(pointl[(num + 1) % len].y - pointl[num].y) == 0) ? 0 : (float)(pointl[(num + 1) % len].x - pointl[num].x) / (float)(pointl[(num + 1) % len].y - pointl[num].y));
	}
	for (num = 0; num < len2; num++)
	{
		ET2[num].flag = 0;
		ET2[num].ymin = (point2[num].y > point2[(num + 1) % len2].y ? point2[(num + 1) % len2].y : point2[num].y);
		ET2[num].ymax = (point2[num].y < point2[(num + 1) % len2].y ? point2[(num + 1) % len2].y : point2[num].y);
		ET2[num].xmin = (point2[num].y > point2[(num + 1) % len2].y ? point2[(num + 1) % len2].x : point2[num].x);
		ET2[num].slope = (((float)(point2[(num + 1) % len2].y - point2[num].y) == 0) ? 0 : (float)(point2[(num + 1) % len2].x - point2[num].x) / (float)(point2[(num + 1) % len2].y - point2[num].y));
	}

	setlinecolor(BLACK);
	for (num = 0; num <= len - 1; num++)
	{

		line(pointl[num % len].x, pointl[num % len].y, pointl[(num + 1) % len].x, pointl[(num + 1) % len].y);
	}
	for (num = 0; num <= len2 - 1; num++)
	{
		line(point2[num % len2].x, point2[num % len2].y, point2[(num + 1) % len2].x, point2[(num + 1) % len2].y);
	}

	// 开始填充
	//printf("%d %d", min, max);
	for (y = min; y <= max; y++) {

		i = 1;
		for (num = 0; num < len; num++)
		{
			if (ET[num].flag == 0 && y > ET[num].ymin)
			{
				if (ET[num].ymax < y)
				{
					ET[num].flag = 1;
				}
				else
				{
					xstack[i++] = ET[num].xmin + ET[num].slope * (y - ET[num].ymin);
				}
			}
		}
		for (num = 0; num < len2; num++)
		{
			if (ET2[num].flag == 0 && y > ET2[num].ymin)
			{
				if (ET2[num].ymax < y)
				{
					ET2[num].flag = 1;
				}
				else
				{
					xstack[i++] = ET2[num].xmin + ET2[num].slope * (y - ET2[num].ymin);
				}
			}
		}

		xstack[0] = i - 1;
		//printf("y=%d ", y);

		//开始填充 划线
		// 对x坐标值进行排序
		for (i = 1; i < xstack[0]; i++)
		{
			for (j = 1; j < xstack[0] + 1 - i; j++)
			{
				if (xstack[j] > xstack[j + 1])
				{
					num = xstack[j];
					xstack[j] = xstack[j + 1];
					xstack[j + 1] = num;
				}
			}
		}
		/*for (i = 1; i <= xstack[0]; i++) {
			printf("%d ", xstack[i]);
		}*/


		for (num = 1; num <= xstack[0]; num += 2) {
			int testx;
			for (testx = xstack[num] + 1; testx <= xstack[num + 1] - 2; testx++) {
				//printf("x=%d,y=%d \n", testx, y);
				if (getpixel(testx, y) == YELLOW && getpixel(testx + 1, y) == YELLOW) {
					setfillcolor(GREEN);
					floodfill(testx, y, BLACK, 0);
				}
				if (getpixel(testx, y) == WHITE && getpixel(testx + 1, y) == WHITE) {
					setfillcolor(BLUE);
					floodfill(testx, y, BLACK, 0);
				}
			}
		}

		/*for (num = 1; num <=xstack[0]; num++) {
			printf("xstack[%d]=%d ", num, xstack[num]);
		}
		printf("\n");*/
	}
	setfillcolor(WHITE);
	floodfill(1, 1, BLACK, 0);

}